General: 
  ☐ Yup for JS validation on both frontend and backend
Server:
  ☐ Install and configure TypeScript
  ☐ Decide between TypeORM/Prisma
    ☐ Setup DB configuration.
    ☐ This includes Data Modeling. I should be able to just use a similar structure from GWScouter
  ☐ Dont forget I installed TablePlus to preview databases
  ☐ Decide on REST vs GraphQL
Client: 
  ✔ Install and configure TypeScript @done(21-09-07 21:03)
  ☐ Install and learn Formik
    ☐ Do I really need Formik? The only form Ill really need is the Search for characters and to input the number of materials a user has
    * One of the Twitch devs I follow suggested against it. react-form-hooks instead
  ☐ Look into HookState

Notes:
  ☐ `npx tsc --init` to create a tsconfig.json file after installing Typescript and the necessary complementary @types packages for w/e Im working with.
  * According to `https://www.prisma.io/docs/guides/deployment/deployment-guides/deploying-to-heroku` - `schema.prisma` should automatically read Herokus config vars and inject thatin env("DATABASE_URL")

Prisma:
  * When I make a change to my schema, run: `npx prisma migrate dev --name someNameHere`
  * Then update my client to match my updated schema: `npx prisma generate`
  * To reseed: `npx prisma migrate reset`

* API Scraping:
* First I'll need to figure out how I want to model a unit, their skill enhancement, and their awakenings
* I also need to figure out an easy way to keep my DB's data up to date w/ the API
  * Some CRON job
  * Need to filter out the "placeholder" units/unreleased units.
  
  * I'll have to manually scrape from epic7x. The API I used before isn't up to date anymore

* Handling `A Crack in World` stages by setting their `instance` property to `0`.